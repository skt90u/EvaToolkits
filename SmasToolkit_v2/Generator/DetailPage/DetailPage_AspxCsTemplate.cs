// ------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本: 11.0.0.0
//  
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SmasToolkit_v2.Generator.DetailPage
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxCsTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class DetailPage_AspxCsTemplate : DetailPage_AspxCsTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 8 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxCsTemplate.tt"
 
    var PageId = detailConfig.PageId;
    var ParentPageId = detailConfig.ParentPageId;
    var PageCategory = Utils.GetPageCategory(PageId);

    var Buttons = detailConfig.Buttons;
    var Columns = detailConfig.Columns;

    var MasterSql = masterConfig.Sql;
    var MasterDetailSql = masterConfig.DetailSql;
    var MasterSqlLines = Utils.GetFormattedSqlLines(MasterSql);
    var MasterSqlFields = Utils.GetFields(MasterSql);
    var MasterDetailSqlLines = Utils.GetFormattedSqlLines(MasterDetailSql);
    
    var DetailTableName = detailConfig.TableName;

    var FetchDataSql = Utils.GenerateFetchDataSql(masterConfig, detailConfig);
    var FetchDataSqlLines = Utils.GetFormattedSqlLines(FetchDataSql);
    var FetchDataSqlFields = Utils.GetFields(FetchDataSql);

    var bSupportHelp = detailConfig.SupportHelp ? "true" : "false";

            
            #line default
            #line hidden
            this.Write(@"using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Text;
using System.Collections;
using DDSC.OracleADO;
using System.Data;

namespace SMAS.MainWebAP.");
            
            #line 41 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxCsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PageCategory));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public partial class ");
            
            #line 43 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxCsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PageId));
            
            #line default
            #line hidden
            this.Write(" : SMAS.MainWebAP.Common.BasePage\r\n    {\r\n        const bool bSupportHelp = ");
            
            #line 45 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxCsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(bSupportHelp));
            
            #line default
            #line hidden
            this.Write(@";

        #region Page_Load

        protected void Page_Load(object sender, EventArgs e)
        {
            try
            {
                if (!Page.IsPostBack)
                {
                    // 初始化控制項(例如: DropDownList, RadioButtonList, ...)

                    // 如果沒有前一頁(或者前一頁不為");
            
            #line 57 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxCsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ParentPageId));
            
            #line default
            #line hidden
            this.Write(")，就忽略後續動作\r\n                    ");
            
            #line 58 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxCsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ParentPageId));
            
            #line default
            #line hidden
            this.Write(" previousPage = Page.PreviousPage as ");
            
            #line 58 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxCsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ParentPageId));
            
            #line default
            #line hidden
            this.Write(";\r\n                    if (previousPage == null)\r\n                    {\r\n\t\t\t     " +
                    "       ");
            
            #line 61 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxCsTemplate.tt"

				        PushIndent("                        ");
				        foreach (var button in Buttons)
				        {
					        WriteLine(button.RenderVisibility(string.Empty));
				        }
				        ClearIndent();
			            
            
            #line default
            #line hidden
            this.Write(@"                        return;
                    }

                    string buttonType = (previousPage.g_ButtonType ?? string.Empty).Trim().ToUpper();
                    ViewState[""Action""] = buttonType;
                    hidACT_TYPE.Value = buttonType;

                    // 當使用者操作為 [新增]，則不載入任何資料
                    if (buttonType.ToString() != ""ADD"") 
                    {
                        // 根據前一頁選取內容，將相關資料載入到對應控制項
                        LoadData(previousPage);
                    }
                    
                    // 根據前一頁選取動作，設定控制項是否可編輯或者唯讀
                    switch (buttonType)
                    {
                        ");
            
            #line 86 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxCsTemplate.tt"

                        List<string> buttonTypes = new List<string> { 
                            "ADD", 
                            "UPD", 
                            "DEL", 
                            "COPY", 
                            "QRY"
                        };                           
                        PushIndent("                        ");
                        foreach (var buttonType in buttonTypes)
                        {
                            WriteLine("case \"{0}\":", buttonType);
                            WriteLine("    // 顯示隱藏按鈕");
                            foreach (var button in Buttons)
				            {
					            WriteLine("    " + button.RenderVisibility(buttonType));
				            }
                            WriteLine("    // 設定控制項是否可讀寫");
		                    foreach (var column in Columns)
		                    {
                                string str = column.RenderWritablity(buttonType);
                                if(!string.IsNullOrEmpty(str))
			                        WriteLine("    " + str);
		                    }
                            WriteLine("    // 設定控制項初始值");
		                    foreach (var column in Columns)
		                    {
                                string str = column.RenderInitValue(buttonType);
                                if(!string.IsNullOrEmpty(str))
			                        WriteLine("    " + str);
		                    }
                            WriteLine("    break;");
                            WriteLine("");
                        }
                        ClearIndent();
                        
            
            #line default
            #line hidden
            this.Write(@"                        default:
                            throw new Exception(string.Format(""Page_Load, 尚未處理當 buttonType = {0}對應的動作"", buttonType));
                    }
                }
            }
            catch (Exception ex)
            {
                showException(string.Format(""{0}, StackTrace: {1}"", ex.Message, ex.StackTrace.ToString()));
            }
        }

        #region GetParams
        /// <summary>
        /// 改善原本參數塞入的方式
        /// </summary>
        private ArrayList GetParams(dbAccess dba, string sql, Dictionary<string, string> dict)
        {
            List<string> sqlParams = sql.Split(new string[] { "" "" }, StringSplitOptions.RemoveEmptyEntries)
                                        .Where(t => t.Trim().StartsWith("":""))
                                        .Select(t => t.Trim().Substring(1).ToUpper())
                                        .ToList();

            ArrayList arrParam = new ArrayList();

            foreach (var key in dict.Keys)
            {
                if (sqlParams.Contains(key))
                {
                    arrParam.Add(dba.GetOracleParam("":"" + key, dict[key]));
                }
            }

            return arrParam;
        }
        #endregion
        #region FetchData
        private DataTable FetchData(");
            
            #line 158 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxCsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ParentPageId));
            
            #line default
            #line hidden
            this.Write(@" previousPage)
        {
            if (previousPage == null) throw new ArgumentNullException(""previousPage"");
            if (previousPage.g_GridKey == null) throw new ArgumentNullException(""previousPage.g_GridKey"");

            // (1) 定義傳入參數
            Dictionary<string, string> dictParams = new Dictionary<string, string>(previousPage.g_GridKey);
            ");
            
            #line 165 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxCsTemplate.tt"

            PushIndent("            ");
			foreach (var field in MasterSqlFields)
			{
                WriteLine("string {0} = dictParams[\"{0}\"];", field);
			}
            ClearIndent();
            
            
            #line default
            #line hidden
            this.Write("\r\n            // (2) 組合SQL\r\n            StringBuilder sb = new StringBuilder();\r\n" +
                    "            ");
            
            #line 176 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxCsTemplate.tt"

            PushIndent("            ");
			foreach (var aSqlLine in FetchDataSqlLines)
			{
				WriteLine("sb.Append(\" {0}\");", aSqlLine);
			}             
            ClearIndent();
            
            
            #line default
            #line hidden
            this.Write(@"            
            // (3) 根據組合SQL判斷實際要加入的參數
            dbAccess dba = new dbAccess();
            ArrayList arrParam = GetParams(dba, sb.ToString(), dictParams);

            // (4) 查詢資料
            DataSet ds = dba.runExecuteQuery(""FetchData"", sb.ToString(), arrParam);
            if (ErrorCtrl(ds))
            {
                return ds.Tables[""FetchData""];
            }
            else
            {
                ClientScript.RegisterClientScriptBlock(this.GetType(), ""Result"", ""<script language='javascript'> $(document).ready(function () { alert('此筆資料已被刪除，請重新選擇！'); $('#btnExit')[0].click(); }); </script>"");
                return null;
            }
        }
        #endregion
        #region LoadData
        /// <summary>
        /// 根據前一頁面所選條件，將相關資料載入到對應控制項
        /// </summary>
        /// <param name=""p_FORWARDER_NO""></param>
        /// <returns></returns>
        private void LoadData(");
            
            #line 208 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxCsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ParentPageId));
            
            #line default
            #line hidden
            this.Write(@" previousPage)
        {
            DataTable dt = FetchData(previousPage);
            SaveToViewState(dt);

            if (dt == null) return;
            SetCtrlValue(this.Details, dt);

            // TODO: 如果有SetCtrlValue無法設定的控制項，請在此手動設定
        }

        private void SaveToViewState(DataTable dt)
        {
            if (dt == null) return;
            if (dt.Rows.Count == 0) return;

            // column.ColumnName都是大寫，因此不使用以下邏輯
            //foreach (DataColumn column in dt.Columns)
            //    ViewState[column.ColumnName] = Convert.ToString(dt.Rows[0][column.ColumnName]);
            
            ");
            
            #line 228 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxCsTemplate.tt"

            PushIndent("            ");
			foreach (var field in FetchDataSqlFields)
			{
				WriteLine("ViewState[\"{0}\"] = Convert.ToString(dt.Rows[0][\"{0}\"]);", field);
			}             
            ClearIndent();
            
            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n        #endregion\r\n\r\n        #endregion\r\n\r\n        #region btnSave_" +
                    "Click\r\n\r\n        /// <summary>\r\n        /// 儲存\r\n        /// </summary>\r\n        " +
                    "/// <param name=\"sender\"></param>\r\n        /// <param name=\"e\"></param>\r\n       " +
                    " protected void btnSave_Click(object sender, EventArgs e)\r\n        {\r\n          " +
                    "  string buttonType = Convert.ToString(ViewState[\"Action\"] ?? \"NULL\").Trim().ToU" +
                    "pper();\r\n\r\n            try\r\n            {\r\n                DataSet result = null" +
                    ";\r\n\r\n                switch (buttonType)\r\n                {\r\n                   " +
                    " case \"ADD\":\r\n                        result = DoAdd();\r\n                       " +
                    " break;\r\n\r\n                    case \"UPD\":\r\n                        result = DoU" +
                    "pdate();\r\n                        break;\r\n\r\n                    case \"DEL\":\r\n   " +
                    "                     result = DoDelete();\r\n                        break;\r\n\r\n   " +
                    "                 case \"COPY\":\r\n                        result = DoCopy();\r\n     " +
                    "                   break;\r\n\r\n                    default:\r\n                     " +
                    "   throw new Exception(string.Format(\"btnSave_Click, 尚未處理當 buttonType = {0} 對應的動" +
                    "作\", buttonType));\r\n                }\r\n\r\n                // 寫入script至client端\r\n   " +
                    "             MyRegScript(result, buttonType);\r\n            }\r\n            catch " +
                    "(Exception ex)\r\n            {\r\n                showException(string.Format(\"{0}," +
                    " StackTrace: {1}\", ex.Message, ex.StackTrace.ToString()));\r\n            }\r\n     " +
                    "   }\r\n\r\n        #region DoAdd\r\n        private DataSet DoAdd()\r\n        {\r\n     " +
                    "       string action = \"ADD\";\r\n\r\n            ddscDataSet ddscDs = new ddscDataSe" +
                    "t();\r\n\r\n            ddscDataTable ddscDt = ddscDs.createDataTable(\"");
            
            #line 295 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxCsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DetailTableName));
            
            #line default
            #line hidden
            this.Write("\");\r\n\r\n            ddscDt.addNewRow();\r\n            ddscDt.setColumnValue(\"action" +
                    "\", \"string\", action);\r\n\r\n            // 設定使用者輸入內容\r\n            ");
            
            #line 301 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxCsTemplate.tt"

            PushIndent("            ");
            foreach (var column in Columns)
            {
                if(column.Name == "UPD_ID" ||
                    column.Name == "UPD_DATE" ||
                    column.Name == "UPD_TIME" ||
                    column.Name == "CRT_ID" ||
                    column.Name == "CRT_DATE" ||
                    column.Name == "CRT_TIME")continue;

                WriteLine("ddscDt.setColumnValue(\"{0}\", \"string\", {1}.Text.Trim());", column.Name, column.GetInputId());
            }
            ClearIndent();
            
            
            #line default
            #line hidden
            this.Write(@"            // 設定[更新者]、[更新日期]、[更新時間]
            ddscDt.setColumnValue(""UPD_ID"", ""string"", User.Identity.Name);
            ddscDt.setColumnValue(""UPD_DATE"", ""string"", SystemDate);
            ddscDt.setColumnValue(""UPD_TIME"", ""string"", SystemTime);
            // 設定[建檔者]、[建檔日期]、[建檔時間]
            ddscDt.setColumnValue(""CRT_ID"", ""string"", User.Identity.Name);
            ddscDt.setColumnValue(""CRT_DATE"", ""string"", SystemDate);
            ddscDt.setColumnValue(""CRT_TIME"", ""string"", SystemTime);
            
            ddscDs.addddscDataTable(ddscDt);

            DataBase dataBase = new DataBase();
            return dataBase.AdditionParameter(ddscDs);
        }
        #endregion

        #region DoUpdate
        private DataSet DoUpdate()
        {
            string action = ""UPD"";

            ddscDataSet ddscDs = new ddscDataSet();

            ddscDataTable ddscDt = ddscDs.createDataTable(""");
            
            #line 339 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxCsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DetailTableName));
            
            #line default
            #line hidden
            this.Write("\");\r\n\r\n            ddscDt.addNewRow();\r\n            ddscDt.setColumnValue(\"action" +
                    "\", \"string\", action);\r\n\r\n            // 設定使用者輸入內容\r\n            ");
            
            #line 345 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxCsTemplate.tt"

            PushIndent("            ");
            foreach (var column in Columns)
            {
                if(column.Name == "UPD_ID" ||
                    column.Name == "UPD_DATE" ||
                    column.Name == "UPD_TIME" ||
                    column.Name == "CRT_ID" ||
                    column.Name == "CRT_DATE" ||
                    column.Name == "CRT_TIME")continue;

                WriteLine("ddscDt.setColumnValue(\"{0}\", \"string\", {1}.Text.Trim());", column.Name, column.GetInputId());
            }
            ClearIndent();
            
            
            #line default
            #line hidden
            this.Write(@"            // 設定[更新者]、[更新日期]、[更新時間]
            ddscDt.setColumnValue(""UPD_ID"", ""string"", User.Identity.Name);
            ddscDt.setColumnValue(""UPD_DATE"", ""string"", SystemDate);
            ddscDt.setColumnValue(""UPD_TIME"", ""string"", SystemTime);

            // 將主鍵值欄位加入Where條件
            ");
            
            #line 366 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxCsTemplate.tt"

            PushIndent("            ");
            foreach (var column in Columns)
            {
                if(!column.IsPrimaryKey)continue;

                WriteLine("ddscDt.setWhereValue(\"{0}\", {1}.Text.Trim());", column.Name, column.GetInputId());
            }
            ClearIndent();
            
            
            #line default
            #line hidden
            this.Write(@"
            ddscDs.addddscDataTable(ddscDt);

            DataBase dataBase = new DataBase();
            return dataBase.AdditionParameter(ddscDs);
        }
        #endregion

        #region DoDelete
        private DataSet DoDelete()
        {
            string action = ""DEL"";

            ddscDataSet ddscDs = new ddscDataSet();

            ddscDataTable ddscDt = ddscDs.createDataTable(""");
            
            #line 391 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxCsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DetailTableName));
            
            #line default
            #line hidden
            this.Write("\");\r\n\r\n            ddscDt.addNewRow();\r\n            ddscDt.setColumnValue(\"action" +
                    "\", \"string\", action);\r\n\r\n            // 將主鍵值欄位加入Where條件\r\n            ");
            
            #line 397 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxCsTemplate.tt"

                PushIndent("            ");

                foreach (var column in Columns)
                {
                    if(!column.IsPrimaryKey)continue;

                    WriteLine("ddscDt.setWhereValue(\"{0}\", {1}.Text.Trim());", column.Name, column.GetInputId());
                }

                ClearIndent();
            
            
            #line default
            #line hidden
            this.Write(@"
            ddscDs.addddscDataTable(ddscDt);

            DataBase dataBase = new DataBase();
            return dataBase.AdditionParameter(ddscDs);
        }
        #endregion

        #region DoCopy
        private DataSet DoCopy()
        {
            string action = ""COPY"";

            ddscDataSet ddscDs = new ddscDataSet();

            ddscDataTable ddscDt = ddscDs.createDataTable(""");
            
            #line 424 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxCsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DetailTableName));
            
            #line default
            #line hidden
            this.Write("\");\r\n\r\n            ddscDt.addNewRow();\r\n            ddscDt.setColumnValue(\"action" +
                    "\", \"string\", action);\r\n\r\n            // 設定使用者輸入內容\r\n            ");
            
            #line 430 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxCsTemplate.tt"

            PushIndent("            ");
            foreach (var column in Columns)
            {
                if(column.Name == "UPD_ID" ||
                    column.Name == "UPD_DATE" ||
                    column.Name == "UPD_TIME" ||
                    column.Name == "CRT_ID" ||
                    column.Name == "CRT_DATE" ||
                    column.Name == "CRT_TIME")continue;

                WriteLine("ddscDt.setColumnValue(\"{0}\", \"string\", {1}.Text.Trim());", column.Name, column.GetInputId());
            }
            ClearIndent();
            
            
            #line default
            #line hidden
            this.Write(@"            // 設定[更新者]、[更新日期]、[更新時間]
            ddscDt.setColumnValue(""UPD_ID"", ""string"", User.Identity.Name);
            ddscDt.setColumnValue(""UPD_DATE"", ""string"", SystemDate);
            ddscDt.setColumnValue(""UPD_TIME"", ""string"", SystemTime);
            // 設定[建檔者]、[建檔日期]、[建檔時間]
            ddscDt.setColumnValue(""CRT_ID"", ""string"", User.Identity.Name);
            ddscDt.setColumnValue(""CRT_DATE"", ""string"", SystemDate);
            ddscDt.setColumnValue(""CRT_TIME"", ""string"", SystemTime);

            ddscDs.addddscDataTable(ddscDt);

            DataBase dataBase = new DataBase();
            return dataBase.AdditionParameter(ddscDs);
        }
        #endregion

        /// <summary>
        /// 刪除
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        protected void btnDELETE_Click(object sender, EventArgs e)
        {
            btnSave_Click(null, null);
        }

        #endregion

        private static string GetNextVal()
        {
            return GetNextVal(""");
            
            #line 475 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxCsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DetailTableName));
            
            #line default
            #line hidden
            this.Write("\", \"SEQ\", string.Empty, DateTime.Now, 7);\r\n        }\r\n\r\n        /// <summary>\r\n  " +
                    "      /// 取得在指定資料表的特定欄位在特定日期中的NextVal\r\n        /// \r\n        /// 格式：201512310000" +
                    "01\r\n        /// </summary>\r\n        private static string GetNextVal(string tabl" +
                    "eName, string columnName, string prefix, DateTime dateTime, int totalWidthOfSequ" +
                    "ence)\r\n        {\r\n            int maxValue = 0;\r\n\r\n            string yyyyMMdd =" +
                    " dateTime.ToString(\"yyyyMMdd\");\r\n            string like = string.Format(\"{0}{1}" +
                    "%\", prefix, yyyyMMdd);\r\n\r\n            dbAccess dba = new dbAccess();\r\n\r\n        " +
                    "    // select max(columnName) as columnName from tableName where CRT_DATE = :CRT" +
                    "_DATE and columnName like \'prefix + dateTime + %\'\r\n            StringBuilder sb " +
                    "= new StringBuilder();\r\n            sb.AppendFormat(\"SELECT MAX({0}) AS MAX_VALU" +
                    "E FROM {1} WHERE CRT_DATE = \'{2}\' AND {0} LIKE \'{3}\'\", columnName, tableName, yy" +
                    "yyMMdd, like);\r\n\r\n            ArrayList arrParam = new ArrayList();\r\n           " +
                    " DataSet ds = dba.runExecuteQuery(\"GetNextVal\", sb.ToString(), arrParam);\r\n\r\n   " +
                    "         DataTable dt = ds.Tables[\"GetNextVal\"];\r\n\r\n            if (dt.Rows.Coun" +
                    "t != 0)\r\n            {\r\n                string MAX_VALUE = dt.Rows[0][\"MAX_VALUE" +
                    "\"].ToString();\r\n\r\n                if (!string.IsNullOrEmpty(MAX_VALUE))\r\n       " +
                    "         {\r\n                    int startIndex = prefix.Length + yyyyMMdd.Length" +
                    ";\r\n\r\n                    maxValue = Convert.ToInt32(MAX_VALUE.Substring(startInd" +
                    "ex));\r\n                }\r\n            }\r\n\r\n            string nextValue = (maxVa" +
                    "lue + 1).ToString().PadLeft(totalWidthOfSequence, \'0\');\r\n\r\n            string re" +
                    "sult = string.Format(\"{0}{1}{2}\", prefix, yyyyMMdd, nextValue);\r\n\r\n            r" +
                    "eturn result;\r\n        }\r\n\r\n        #region MyRegScript\r\n        /// <summary>\r\n" +
                    "        /// 參考 BasePage.RegScript\r\n        /// </summary>\r\n        public void M" +
                    "yRegScript(DataSet ds, string action, string msg = \"\")\r\n        {\r\n            a" +
                    "ction = action.ToString().ToLower();\r\n\r\n            Employee OnUser = LoginUser(" +
                    ");\r\n\r\n            string strResult = ds.Tables[0].Rows[0][\"TransResult\"].ToStrin" +
                    "g();\r\n            string strMessage = ds.Tables[0].Rows[0][\"Message\"].ToString()" +
                    ";\r\n\r\n            string strSuccess = string.Empty;\r\n            string strFail =" +
                    " string.Empty;\r\n            string strClose = string.Empty;\r\n\r\n            switc" +
                    "h (action)\r\n            {\r\n                case \"add\":\r\n                    {\r\n " +
                    "                       switch (OnUser.UseLanguage)\r\n                        {\r\n " +
                    "                           case \"zh-tw\":\r\n                                strSuc" +
                    "cess = \"新增成功!\";\r\n                                strFail = \"新增失敗!\\\\n\";\r\n        " +
                    "                        break;\r\n                            case \"zh-en\":\r\n     " +
                    "                           strSuccess = \"ADD SUCCESS !\";\r\n                      " +
                    "          strFail = \"ADD FAIL !\\\\n\";\r\n                                break;\r\n  " +
                    "                      }\r\n                    } break;\r\n\r\n                case \"u" +
                    "pd\":\r\n                    {\r\n                        switch (OnUser.UseLanguage)" +
                    "\r\n                        {\r\n                            case \"zh-tw\":\r\n        " +
                    "                        strSuccess = \"修改成功!\";\r\n                                s" +
                    "trFail = \"修改失敗!\\\\n\";\r\n                                break;\r\n                  " +
                    "          case \"zh-en\":\r\n                                strSuccess = \"EDIT SUCC" +
                    "ESS !\";\r\n                                strFail = \"EDIT FAIL !\\\\n\";\r\n          " +
                    "                      break;\r\n                        }\r\n                    } b" +
                    "reak;\r\n\r\n                case \"del\":\r\n                    {\r\n                   " +
                    "     switch (OnUser.UseLanguage)\r\n                        {\r\n                   " +
                    "         case \"zh-tw\":\r\n                                strSuccess = \"刪除成功!\";\r\n " +
                    "                               strFail = \"刪除失敗!\\\\n\";\r\n                          " +
                    "      break;\r\n                            case \"zh-en\":\r\n                       " +
                    "         strSuccess = \"DELETE SUCCESS !\";\r\n                                strFa" +
                    "il = \"DELETE FAIL !\\\\n\";\r\n                                break;\r\n              " +
                    "          }\r\n                    } break;\r\n\r\n                case \"copy\":\r\n     " +
                    "               {\r\n                        switch (OnUser.UseLanguage)\r\n         " +
                    "               {\r\n                            case \"zh-tw\":\r\n                   " +
                    "             strSuccess = \"複製成功!\";\r\n                                strFail = \"複" +
                    "製失敗!\\\\n\";\r\n                                break;\r\n                            c" +
                    "ase \"zh-en\":\r\n                                strSuccess = \"COPY SUCCESS !\";\r\n  " +
                    "                              strFail = \"COPY FAIL !\\\\n\";\r\n                     " +
                    "           break;\r\n                        }\r\n                    } break;\r\n\r\n  " +
                    "              default:\r\n                    {\r\n                        switch (O" +
                    "nUser.UseLanguage)\r\n                        {\r\n                            case " +
                    "\"zh-tw\":\r\n                                strSuccess = \"存檔成功!\";\r\n               " +
                    "                 strFail = \"存檔失敗!\\\\n\";\r\n                                break;\r\n" +
                    "                            case \"zh-en\":\r\n                                strSu" +
                    "ccess = \"SAVE SUCCESS !\";\r\n                                strFail = \"SAVE FAIL " +
                    "!\\\\n\";\r\n                                break;\r\n                        }\r\n     " +
                    "               } break;\r\n            }\r\n\r\n            if ((strResult == \"T\"))\r\n " +
                    "           {\r\n                strClose = \" Exit(); \";\r\n\r\n                ClientS" +
                    "cript.RegisterClientScriptBlock(this.GetType(), \"Result\", \"<script language=\\\"ja" +
                    "vascript\\\"> alert($(\'<div/>\').html(\'\" + HttpUtility.HtmlEncode(msg + strSuccess)" +
                    " + \"\').text());window.returnValue = true;\" + HttpUtility.HtmlEncode(strClose) + " +
                    "\" </script>\");\r\n            }\r\n\r\n            if ((strResult == \"F\"))\r\n          " +
                    "  {\r\n                ClientScript.RegisterClientScriptBlock(this.GetType(), \"Res" +
                    "ult\", \"<script language=\\\"javascript\\\"> alert($(\'<div/>\').html(\'\" + HttpUtility." +
                    "HtmlEncode(msg + strFail + strMessage) + \"\').text()); window.returnValue = false" +
                    "; </script>\");\r\n            }\r\n        }\r\n        #endregion\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxCsTemplate.tt"

private global::SmasToolkit_v2.MasterPageGeneratorConfig _masterConfigField;

/// <summary>
/// Access the masterConfig parameter of the template.
/// </summary>
private global::SmasToolkit_v2.MasterPageGeneratorConfig masterConfig
{
    get
    {
        return this._masterConfigField;
    }
}

private global::SmasToolkit_v2.DetailPageGeneratorConfig _detailConfigField;

/// <summary>
/// Access the detailConfig parameter of the template.
/// </summary>
private global::SmasToolkit_v2.DetailPageGeneratorConfig detailConfig
{
    get
    {
        return this._detailConfigField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool masterConfigValueAcquired = false;
if (this.Session.ContainsKey("masterConfig"))
{
    if ((typeof(global::SmasToolkit_v2.MasterPageGeneratorConfig).IsAssignableFrom(this.Session["masterConfig"].GetType()) == false))
    {
        this.Error("參數 \'masterConfig\' 的型別 \'SmasToolkit_v2.MasterPageGeneratorConfig\' 不符合傳遞至範本之資料的型別。");
    }
    else
    {
        this._masterConfigField = ((global::SmasToolkit_v2.MasterPageGeneratorConfig)(this.Session["masterConfig"]));
        masterConfigValueAcquired = true;
    }
}
if ((masterConfigValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("masterConfig");
    if ((data != null))
    {
        if ((typeof(global::SmasToolkit_v2.MasterPageGeneratorConfig).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("參數 \'masterConfig\' 的型別 \'SmasToolkit_v2.MasterPageGeneratorConfig\' 不符合傳遞至範本之資料的型別。");
        }
        else
        {
            this._masterConfigField = ((global::SmasToolkit_v2.MasterPageGeneratorConfig)(data));
        }
    }
}
bool detailConfigValueAcquired = false;
if (this.Session.ContainsKey("detailConfig"))
{
    if ((typeof(global::SmasToolkit_v2.DetailPageGeneratorConfig).IsAssignableFrom(this.Session["detailConfig"].GetType()) == false))
    {
        this.Error("參數 \'detailConfig\' 的型別 \'SmasToolkit_v2.DetailPageGeneratorConfig\' 不符合傳遞至範本之資料的型別。");
    }
    else
    {
        this._detailConfigField = ((global::SmasToolkit_v2.DetailPageGeneratorConfig)(this.Session["detailConfig"]));
        detailConfigValueAcquired = true;
    }
}
if ((detailConfigValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("detailConfig");
    if ((data != null))
    {
        if ((typeof(global::SmasToolkit_v2.DetailPageGeneratorConfig).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("參數 \'detailConfig\' 的型別 \'SmasToolkit_v2.DetailPageGeneratorConfig\' 不符合傳遞至範本之資料的型別。");
        }
        else
        {
            this._detailConfigField = ((global::SmasToolkit_v2.DetailPageGeneratorConfig)(data));
        }
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class DetailPage_AspxCsTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
