// ------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本: 11.0.0.0
//  
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SmasToolkit_v2.Generator.DetailPage
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class DetailPage_AspxTemplate : DetailPage_AspxTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 8 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxTemplate.tt"
 
    var PageId = detailConfig.PageId;
    var ParentPageId = detailConfig.ParentPageId;
    var PageCategory = Utils.GetPageCategory(PageId);

    var Buttons = detailConfig.Buttons;
    var Columns = detailConfig.Columns;

    var MasterSql = masterConfig.Sql;
    var MasterDetailSql = masterConfig.DetailSql;
    var MasterSqlLines = Utils.GetFormattedSqlLines(MasterSql);
    var MasterSqlFields = Utils.GetFields(MasterSql);
    var MasterDetailSqlLines = Utils.GetFormattedSqlLines(MasterDetailSql);
    
    var DetailTableName = detailConfig.TableName;

    var FetchDataSql = Utils.GenerateFetchDataSql(masterConfig, detailConfig);
    var FetchDataSqlLines = Utils.GetFormattedSqlLines(FetchDataSql);

            
            #line default
            #line hidden
            this.Write("<%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeBehind=\"");
            
            #line 27 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PageId));
            
            #line default
            #line hidden
            this.Write(".aspx.cs\" Inherits=\"SMAS.MainWebAP.");
            
            #line 27 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PageCategory));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 27 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PageId));
            
            #line default
            #line hidden
            this.Write(@""" %>
<%@ Register TagPrefix=""ddsc"" Namespace=""DDSC.CustomServerControl"" Assembly=""DDSC.CustomServerControl"" %>

<html xmlns=""http://www.w3.org/1999/xhtml"">
<head id=""Head1"" runat=""server"">
    <meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
    <meta http-equiv=""X-UA-Compatible"" content=""IE=9"" />
    <title>Service Material Administration System</title>
    <link href=""../styles/style.css"" rel=""stylesheet"" type=""text/css"" />
    <link href=""../Styles/reset.css"" rel=""stylesheet"" />
    <script src=""../Scripts/jquery-1.8.3.js""></script>
    <script src=""../Scripts/ErrHandler.js""></script>
    <script src=""../Scripts/BlockUI.js""></script>
    <script src=""js/");
            
            #line 40 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PageId));
            
            #line default
            #line hidden
            this.Write(".js\"></script>\r\n</head>\r\n<body bgcolor=\"#e7eef4\">\r\n<form id=\"form1\" runat=\"server" +
                    "\">\r\n<div id=\"Wrapper\">\r\n<div id=\"pageTop\">\r\n\t<div class=\"TitleName01\">\r\n\t\t<asp:L" +
                    "abel ID=\"lbl");
            
            #line 47 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ParentPageId));
            
            #line default
            #line hidden
            this.Write("\" runat=\"server\" Text=\"\"></asp:Label>-");
            
            #line 47 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PageId));
            
            #line default
            #line hidden
            this.Write("\r\n\t</div>\r\n    <div class=\"linespace\">\r\n\t\t<div>\r\n\t\t\t<input id=\"hidACT_TYPE\" runat" +
                    "=\"server\" type=\"hidden\" />\r\n\t\t\t");
            
            #line 52 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxTemplate.tt"

			PushIndent("			");
			foreach (var button in Buttons)
			{
				WriteLine(button.RenderHtml());
			}
			ClearIndent();
			
            
            #line default
            #line hidden
            this.Write(@"		</div>
        <div class=""round"">
            <asp:Panel ID=""Details"" runat=""server"">
                <div class=""divMain"">
                    <table border=""0"" align=""center"" cellpadding=""5"" cellspacing=""1"" class=""table01"" style=""margin-top: 20px; width: 98%"">
						");
            
            #line 65 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxTemplate.tt"

						PushIndent("                        ");
						foreach (var column in Columns)
						{
							WriteLine("<tr>");
							WriteLine("	<td>");
							WriteLine("		{0}", column.RenderLabel());
							WriteLine("	</td>");
							WriteLine("	<td>");
							WriteLine("		{0}", column.RenderHtml());
							WriteLine("	</td>");
							WriteLine("</tr>");
						}
						ClearIndent();
						
            
            #line default
            #line hidden
            this.Write("                    </table>\r\n                </div>\r\n            </asp:Panel>\r\n " +
                    "       </div>\r\n    </div>\r\n</div><!-- pageTop -->\r\n</div><!-- Wrapper --> \r\n</fo" +
                    "rm>\r\n</body>\r\n</html>");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\Backup\Markdown\EvaToolkits\SmasToolkit_v2\Generator\DetailPage\DetailPage_AspxTemplate.tt"

private global::SmasToolkit_v2.MasterPageGeneratorConfig _masterConfigField;

/// <summary>
/// Access the masterConfig parameter of the template.
/// </summary>
private global::SmasToolkit_v2.MasterPageGeneratorConfig masterConfig
{
    get
    {
        return this._masterConfigField;
    }
}

private global::SmasToolkit_v2.DetailPageGeneratorConfig _detailConfigField;

/// <summary>
/// Access the detailConfig parameter of the template.
/// </summary>
private global::SmasToolkit_v2.DetailPageGeneratorConfig detailConfig
{
    get
    {
        return this._detailConfigField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool masterConfigValueAcquired = false;
if (this.Session.ContainsKey("masterConfig"))
{
    if ((typeof(global::SmasToolkit_v2.MasterPageGeneratorConfig).IsAssignableFrom(this.Session["masterConfig"].GetType()) == false))
    {
        this.Error("參數 \'masterConfig\' 的型別 \'SmasToolkit_v2.MasterPageGeneratorConfig\' 不符合傳遞至範本之資料的型別。");
    }
    else
    {
        this._masterConfigField = ((global::SmasToolkit_v2.MasterPageGeneratorConfig)(this.Session["masterConfig"]));
        masterConfigValueAcquired = true;
    }
}
if ((masterConfigValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("masterConfig");
    if ((data != null))
    {
        if ((typeof(global::SmasToolkit_v2.MasterPageGeneratorConfig).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("參數 \'masterConfig\' 的型別 \'SmasToolkit_v2.MasterPageGeneratorConfig\' 不符合傳遞至範本之資料的型別。");
        }
        else
        {
            this._masterConfigField = ((global::SmasToolkit_v2.MasterPageGeneratorConfig)(data));
        }
    }
}
bool detailConfigValueAcquired = false;
if (this.Session.ContainsKey("detailConfig"))
{
    if ((typeof(global::SmasToolkit_v2.DetailPageGeneratorConfig).IsAssignableFrom(this.Session["detailConfig"].GetType()) == false))
    {
        this.Error("參數 \'detailConfig\' 的型別 \'SmasToolkit_v2.DetailPageGeneratorConfig\' 不符合傳遞至範本之資料的型別。");
    }
    else
    {
        this._detailConfigField = ((global::SmasToolkit_v2.DetailPageGeneratorConfig)(this.Session["detailConfig"]));
        detailConfigValueAcquired = true;
    }
}
if ((detailConfigValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("detailConfig");
    if ((data != null))
    {
        if ((typeof(global::SmasToolkit_v2.DetailPageGeneratorConfig).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("參數 \'detailConfig\' 的型別 \'SmasToolkit_v2.DetailPageGeneratorConfig\' 不符合傳遞至範本之資料的型別。");
        }
        else
        {
            this._detailConfigField = ((global::SmasToolkit_v2.DetailPageGeneratorConfig)(data));
        }
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class DetailPage_AspxTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
