// ------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本: 11.0.0.0
//  
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SmasToolkit
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Backup\Markdown\EvaToolkits\SmasToolkit\MasterPageGenerator_BLLTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class MasterPageGenerator_BLLTemplate : MasterPageGenerator_BLLTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using SMAS.CustomComponent;
using System.Web.Services;
using Newtonsoft.Json;
using System.Data.Objects;
using System.Text;
using System.Collections;
using DDSC.OracleADO;
using SMAS.MainWebAP.Common;
using System.Xml;
using System.Data;

namespace SMAS.MainWebAP.");
            
            #line 24 "C:\Backup\Markdown\EvaToolkits\SmasToolkit\MasterPageGenerator_BLLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Utils.GetPageCategory(config.PageId)));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public partial class ");
            
            #line 26 "C:\Backup\Markdown\EvaToolkits\SmasToolkit\MasterPageGenerator_BLLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(config.PageId));
            
            #line default
            #line hidden
            this.Write(@" : BasePage
    {
        /// <summary>
        /// 改善原本參數塞入的方式
        /// </summary>
        private static ArrayList GetParams(dbAccess dba, string sql, Dictionary<string, string> dict)
        {
            List<string> sqlParams = sql.Split(new string[] { "" "" }, StringSplitOptions.RemoveEmptyEntries)
										.Where(t => t.Trim().StartsWith("":""))
										.Select(t => t.Trim().Substring(1).ToUpper())
										.ToList();

            ArrayList arrParam = new ArrayList();

            foreach(var key in dict.Keys)
            {
                if(sqlParams.Contains(key))
                {
                    arrParam.Add(dba.GetOracleParam("":"" + key , dict[key]));
                }
            }

            return arrParam;
        }

        /// <summary>
        /// 主頁面, 當點選搜尋按鈕，查詢所需要顯示內容
        /// </summary>
        [WebMethod]
        public static Object GetProgramADO(");
            
            #line 55 "C:\Backup\Markdown\EvaToolkits\SmasToolkit\MasterPageGenerator_BLLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", config.QueryConditions.Select(hc => "string p_" + hc.Name))));
            
            #line default
            #line hidden
            this.Write(", PageInfo p_PageInfo)\r\n        {\r\n            try\r\n            {\r\n              " +
                    "  // (1) 定義傳入參數\r\n                Dictionary<string, string> dictParams = new Dic" +
                    "tionary<string, string>();\r\n\t\t\t\t");
            
            #line 61 "C:\Backup\Markdown\EvaToolkits\SmasToolkit\MasterPageGenerator_BLLTemplate.tt"

					PushIndent("                ");

					foreach (var hc in config.QueryConditions)
					{
						WriteLine("dictParams.Add(\"{0}\", p_{0});", hc.Name);
					}

					ClearIndent();
				
            
            #line default
            #line hidden
            this.Write("\r\n                // (2) 組合SQL\r\n                StringBuilder sb = new StringBuil" +
                    "der();\r\n\t\t\t\t");
            
            #line 74 "C:\Backup\Markdown\EvaToolkits\SmasToolkit\MasterPageGenerator_BLLTemplate.tt"

					PushIndent("				");

					foreach (var aSqlLine in SqlUtils.GetFormattedSqlLines(config.SearchSql))
					{
						var hc = config.GetMatchedQueryCondition(aSqlLine, config.QueryConditions);

						if(hc == null)
						{
							WriteLine("sb.Append(\" {0}\");", aSqlLine);
						}
						else
						{
							WriteLine("if (!string.IsNullOrEmpty(p_{0}))", hc.Name);
							WriteLine("{");
							WriteLine("	sb.Append(\" {0}\");", aSqlLine);
							WriteLine("}");
						}
					}

					ClearIndent();
				
            
            #line default
            #line hidden
            this.Write(@"
                // (3) 根據組合SQL判斷實際要加入的參數
                dbAccess dba = new dbAccess();
                ArrayList arrParam = GetParams(dba, sb.ToString(), dictParams);

                // (4) 查詢資料
                FunctionHandler handler = new FunctionHandler();
                return handler.ADOGridHandler(sb, arrParam, p_PageInfo);
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }

		/// <summary>
        /// 主頁面, 當點選三角形圖示，查詢所需要顯示內容
        /// </summary>
        [WebMethod]
		public static Object QueryDetl(");
            
            #line 115 "C:\Backup\Markdown\EvaToolkits\SmasToolkit\MasterPageGenerator_BLLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", SqlUtils.GetFields(config.SearchSql).Select(field => "string p_" + field))));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n            // (1) 定義傳入參數\r\n            Dictionary<string, string> d" +
                    "ictParams = new Dictionary<string, string>();\r\n\t\t\t");
            
            #line 119 "C:\Backup\Markdown\EvaToolkits\SmasToolkit\MasterPageGenerator_BLLTemplate.tt"

				PushIndent("            ");

				foreach (var field in SqlUtils.GetFields(config.SearchSql))
				{
					WriteLine("dictParams.Add(\"{0}\", p_{0});", field);
				}

				ClearIndent();
			
            
            #line default
            #line hidden
            this.Write("\r\n            // (2) 組合SQL\r\n            StringBuilder sb = new StringBuilder();\r\n" +
                    "\t\t\t");
            
            #line 132 "C:\Backup\Markdown\EvaToolkits\SmasToolkit\MasterPageGenerator_BLLTemplate.tt"

				PushIndent("            ");

				foreach (var aSqlLine in SqlUtils.GetFormattedSqlLines(config.SearchDetailSql))
				{
					WriteLine("sb.Append(\" {0}\");", aSqlLine);
				}

				ClearIndent();
			
            
            #line default
            #line hidden
            this.Write(@"
            // (3) 根據組合SQL判斷實際要加入的參數
            dbAccess dba = new dbAccess();
            ArrayList arrParam = GetParams(dba, sb.ToString(), dictParams);

            // (4) 查詢資料
            DataSet ds = dba.runExecuteQuery(""QueryDetl"", sb.ToString(), arrParam);
            if ((ds.Tables[""info""].Rows[0][""ReturnCode""].ToString() != ""100"" && ds.Tables[""info""].Rows[0][""ReturnCode""].ToString() != ""999""))
                return dba.RowsToDictionary(ds.Tables[""QueryDetl""], null, null);
            else
                return dba.RowsToDictionary(ds.Tables[""info""], null, null);
        }

        /// <summary>
        /// 檢查主鍵值是否重複
        /// </summary>
        [WebMethod]
        public static bool DoesDataAlreadyExist(");
            
            #line 159 "C:\Backup\Markdown\EvaToolkits\SmasToolkit\MasterPageGenerator_BLLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", config.DetailConfig.Columns.Select(col=>"string p_" +  col.Name).ToList())));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n            // (1) 定義傳入參數\r\n            Dictionary<string, string> d" +
                    "ictParams = new Dictionary<string, string>();\r\n\t\t\t");
            
            #line 163 "C:\Backup\Markdown\EvaToolkits\SmasToolkit\MasterPageGenerator_BLLTemplate.tt"

				PushIndent("            ");

				foreach (var field in config.DetailConfig.Columns.Select(col=> col.Name))
				{
					WriteLine("dictParams.Add(\"{0}\", p_{0});", field);
				}

				ClearIndent();
			
            
            #line default
            #line hidden
            this.Write("\r\n            // (2) 組合SQL\r\n            StringBuilder sb = new StringBuilder();\r\n" +
                    "\t\t\t");
            
            #line 176 "C:\Backup\Markdown\EvaToolkits\SmasToolkit\MasterPageGenerator_BLLTemplate.tt"

				PushIndent("            ");

				foreach (var aSqlLine in SqlUtils.GetFormattedSqlLines(SqlUtils.GenerateDoesDataAlreadyExistSql(config.DetailConfig)))
				{
					WriteLine("sb.Append(\" {0}\");", aSqlLine);
				}

				ClearIndent();
			
            
            #line default
            #line hidden
            this.Write(@"
            // (3) 根據組合SQL判斷實際要加入的參數
            dbAccess dba = new dbAccess();
            ArrayList arrParam = GetParams(dba, sb.ToString(), dictParams);

            // (4) 查詢資料
            DataSet ds = dba.runExecuteQuery(""DoesDataAlreadyExist"", sb.ToString(), arrParam);
            return ds.Tables[""info""].Rows[0][""ReturnCode""].ToString() == ""000""; 
        }
    }
}");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\Backup\Markdown\EvaToolkits\SmasToolkit\MasterPageGenerator_BLLTemplate.tt"

private global::SmasToolkit.MasterPageGeneratorConfig _configField;

/// <summary>
/// Access the config parameter of the template.
/// </summary>
private global::SmasToolkit.MasterPageGeneratorConfig config
{
    get
    {
        return this._configField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool configValueAcquired = false;
if (this.Session.ContainsKey("config"))
{
    if ((typeof(global::SmasToolkit.MasterPageGeneratorConfig).IsAssignableFrom(this.Session["config"].GetType()) == false))
    {
        this.Error("參數 \'config\' 的型別 \'SmasToolkit.MasterPageGeneratorConfig\' 不符合傳遞至範本之資料的型別。");
    }
    else
    {
        this._configField = ((global::SmasToolkit.MasterPageGeneratorConfig)(this.Session["config"]));
        configValueAcquired = true;
    }
}
if ((configValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("config");
    if ((data != null))
    {
        if ((typeof(global::SmasToolkit.MasterPageGeneratorConfig).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("參數 \'config\' 的型別 \'SmasToolkit.MasterPageGeneratorConfig\' 不符合傳遞至範本之資料的型別。");
        }
        else
        {
            this._configField = ((global::SmasToolkit.MasterPageGeneratorConfig)(data));
        }
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class MasterPageGenerator_BLLTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
